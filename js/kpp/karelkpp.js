/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var karelkpp = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[2,73],$V2=[6,14],$V3=[1,20],$V4=[1,32],$V5=[1,54],$V6=[1,42],$V7=[1,43],$V8=[1,44],$V9=[1,45],$Va=[1,46],$Vb=[1,47],$Vc=[1,57],$Vd=[1,58],$Ve=[1,59],$Vf=[1,56],$Vg=[16,17,19,24,26,27,28,29,30,37,40,41,42,75],$Vh=[1,68],$Vi=[1,69],$Vj=[16,17,19,24,26,27,28,29,30,37,39,40,41,42,75],$Vk=[1,85],$Vl=[1,88],$Vm=[1,89],$Vn=[1,90],$Vo=[1,111],$Vp=[1,107],$Vq=[1,109],$Vr=[1,112],$Vs=[1,113],$Vt=[1,114],$Vu=[1,115],$Vv=[1,116],$Vw=[1,117],$Vx=[1,118],$Vy=[1,119],$Vz=[1,120],$VA=[1,121],$VB=[1,122],$VC=[1,123],$VD=[1,124],$VE=[1,125],$VF=[1,126],$VG=[1,127],$VH=[1,128],$VI=[1,129],$VJ=[1,139],$VK=[9,45],$VL=[1,140],$VM=[9,45,47],$VN=[8,9,45,47];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"PROG":4,"def_list":5,"DEF":6,"MAIN":7,"LB":8,"RB":9,"block":10,"EOF":11,"import_list":12,"import":13,"IMPORT":14,"identifier":15,"SC":16,"BEGIN":17,"expr_list":18,"END":19,"def":20,"line":21,"VAR":22,"expr":23,"FORWARD":24,"lend":25,"LEFT":26,"PICKBUZZER":27,"LEAVEBUZZER":28,"HALT":29,"RET":30,"call":31,"debugprint":32,"cond":33,"loop":34,"repeat":35,"integer":36,"IF":37,"term":38,"ELSE":39,"WHILE":40,"REPEAT":41,"PRINT":42,"string":43,"COMMA":44,"OR":45,"and_term":46,"AND":47,"not_term":48,"NOT":49,"clause":50,"IFZ":51,"bool_fun":52,"IFNFWALL":53,"IFFWALL":54,"IFNLWALL":55,"IFLWALL":56,"IFNRWALL":57,"IFRWALL":58,"IFWBUZZER":59,"IFNWBUZZER":60,"IFBBUZZER":61,"IFNBBUZZER":62,"IFW":63,"IFN":64,"IFE":65,"IFS":66,"IFNW":67,"IFNN":68,"IFNE":69,"IFNS":70,"STRING":71,"NUM":72,"INC":73,"DEC":74,"IDEN":75,"$accept":0,"$end":1},
terminals_: {2:"error",4:"PROG",6:"DEF",7:"MAIN",8:"LB",9:"RB",11:"EOF",14:"IMPORT",16:"SC",17:"BEGIN",19:"END",22:"VAR",24:"FORWARD",26:"LEFT",27:"PICKBUZZER",28:"LEAVEBUZZER",29:"HALT",30:"RET",37:"IF",39:"ELSE",40:"WHILE",41:"REPEAT",42:"PRINT",44:"COMMA",45:"OR",47:"AND",49:"NOT",51:"IFZ",53:"IFNFWALL",54:"IFFWALL",55:"IFNLWALL",56:"IFLWALL",57:"IFNRWALL",58:"IFRWALL",59:"IFWBUZZER",60:"IFNWBUZZER",61:"IFBBUZZER",62:"IFNBBUZZER",63:"IFW",64:"IFN",65:"IFE",66:"IFS",67:"IFNW",68:"IFNN",69:"IFNE",70:"IFNS",71:"STRING",72:"NUM",73:"INC",74:"DEC",75:"IDEN"},
productions_: [0,[3,8],[3,7],[3,9],[3,8],[12,2],[12,1],[13,5],[10,3],[5,2],[5,1],[20,6],[20,8],[18,2],[18,1],[23,2],[23,2],[23,2],[23,2],[23,2],[23,2],[23,1],[23,2],[23,1],[23,1],[23,1],[23,1],[23,1],[25,3],[25,1],[31,2],[31,5],[33,6],[33,8],[34,6],[35,6],[32,5],[32,5],[32,7],[38,3],[38,1],[46,3],[46,1],[48,2],[48,1],[50,4],[50,1],[50,3],[50,3],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[43,1],[36,1],[36,1],[36,4],[36,4],[15,1],[21,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return validate($$[$0-6], $$[$0-1].concat([['LINE', yylineno], ['HALT']]), yy); 
break;
case 2:
 return validate([], $$[$0-1].concat([['LINE', yylineno], ['HALT']]), yy); 
break;
case 3:
 
      return validate(
        $$[$0-6].concat($$[$0-7]),
        $$[$0-1].concat([['LINE', yylineno],
        ['HALT']]),
        yy
      ); 
    
break;
case 4:
 
      return validate(
        $$[$0-6],
        $$[$0-1].concat([['LINE', yylineno],
        ['HALT']]),
        yy
      ); 
    
break;
case 5: case 9:
 this.$ = $$[$0-1].concat($$[$0]); 
break;
case 6: case 10: case 21: case 23: case 24: case 25: case 26: case 40: case 42: case 44: case 46:
 this.$ = $$[$0]; 
break;
case 7:
    
      switch($$[$0-2]) {
        case 'karel_god':
          this.$ = karel_god('kpp');
          break;
        default:
          yy.parser.parseError("Unknown variable: " + $$[$0-2], {
            text: $$[$0-2],
            line: 1
          });
          break;
      }
    
break;
case 8: case 22: case 48:
 this.$ = $$[$0-1]; 
break;
case 11:
 this.$ = [[$$[$0-3], $$[$0-4].concat($$[$0]).concat([['RET']]), 1]]; 
break;
case 12:

        let result = $$[$0-6].concat($$[$0]).concat([['RET']]);
        for (let i = 0; i < result.length; i++) {
          if (result[i][0]=='PARAM') {
            if (result[i][1] == $$[$0-2]) {
              result[i][1] =0;
            } else {
              yy.parser.parseError("Unknown variable: " + $$[$0-2], {
                text: $$[$0-2],
                line: yylineno,
              });
            }
          }
        }
        this.$ = [[$$[$0-5], result, 2]];      
    
break;
case 13:
this.$ = $$[$0-1].concat($$[$0]); 
break;
case 14:
this.$ = $$[$0]; 
break;
case 15:
 this.$ = [['LINE', yylineno], ['WORLDWALLS'], ['ORIENTATION'], ['MASK'], ['AND'], ['NOT'], ['EZ', 'WALL'], ['FORWARD']]; 
break;
case 16:
 this.$ = [['LINE', yylineno], ['LEFT']]; 
break;
case 17:
 this.$ = [['LINE', yylineno], ['WORLDBUZZERS'], ['EZ', 'WORLDUNDERFLOW'], ['PICKBUZZER']]; 
break;
case 18:
 this.$ = [['LINE', yylineno], ['BAGBUZZERS'], ['EZ', 'BAGUNDERFLOW'], ['LEAVEBUZZER']]; 
break;
case 19:
 this.$ = [['LINE', yylineno], ['HALT']]; 
break;
case 20:
 this.$ = [['LINE', yylineno], ['RET']]; 
break;
case 27:
 this.$ = []; 
break;
case 30:
 this.$ = [['LINE', yylineno], ['LOAD', 0], ['CALL', $$[$0-1], 1], ['LINE', yylineno]]; 
break;
case 31:
 this.$ = [['LINE', yylineno]].concat($$[$0-2]).concat([['CALL', $$[$0-4], 2], ['LINE', yylineno]]); 
break;
case 32:
 this.$ = 
      $$[$0-4]
      .concat($$[$0-2])
      .concat([['JZ', $$[$0].length]])
      .concat($$[$0]); 
    
break;
case 33:
 this.$ = 
      $$[$0-6]
      .concat($$[$0-4])
      .concat([['JZ', 1+$$[$0-2].length]])
      .concat($$[$0-3])
      .concat([['JMP',$$[$0-1].length]])
      .concat($$[$0-1]); 
    
break;
case 34:
 this.$ = 
      $$[$0-4]
      .concat($$[$0-2]) 
      .concat([['JZ', 1+$$[$0].length]])
      .concat($$[$0])
      .concat([['JMP', -1 -($$[$0-2].length+2+$$[$0].length)]])
      ;
    
break;
case 35:

      this.$ = $$[$0-2]
      .concat($$[$0-4])
      .concat([
        ['DUP'],
        ['JZ', 2+$$[$0].length]])
      .concat($$[$0])
      .concat([
        ['DEC'],
        ['JMP', -1 - ($$[$0].length+4)],
        ['POP']
      ]);      
    
break;
case 36:

      this.$ = 
      $$[$0-3]
      .concat($$[$0-1])
      .concat([['PRINT', 0]]);
    
break;
case 37:

      this.$ = 
      $$[$0-3]
      .concat([['PRINT', 1]])
      .concat($$[$0-1]);
    
break;
case 38:

      this.$ = 
      $$[$0-5]
      .concat($$[$0-1])
      .concat([['PRINT', 2]])
      .concat($$[$0-3]);
    
break;
case 39:
 this.$ = $$[$0-2].concat($$[$0]).concat([['OR']]); 
break;
case 41:
 this.$ = $$[$0-2].concat($$[$0]).concat([['AND']]); 
break;
case 43:
 this.$ = $$[$0].concat([['NOT']]); 
break;
case 45:
 this.$ = $$[$0-1].concat([['NOT']]); 
break;
case 47:
 this.$ = $$[$0-2]; 
break;
case 49:
 this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['MASK'], ['AND'], ['NOT']]; 
break;
case 50:
 this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['MASK'], ['AND']]; 
break;
case 51:
 this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['ROTL'], ['MASK'], ['AND'], ['NOT']]; 
break;
case 52:
 this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['ROTL'], ['MASK'], ['AND']]; 
break;
case 53:
 this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['ROTR'], ['MASK'], ['AND'], ['NOT']]; 
break;
case 54:
 this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['ROTR'], ['MASK'], ['AND']]; 
break;
case 55:
 this.$ = [['WORLDBUZZERS'], ['LOAD', 0], ['EQ'], ['NOT']]; 
break;
case 56:
 this.$ = [['WORLDBUZZERS'], ['NOT']]; 
break;
case 57:
 this.$ = [['BAGBUZZERS'], ['LOAD', 0], ['EQ'], ['NOT']]; 
break;
case 58:
 this.$ = [['BAGBUZZERS'], ['NOT']]; 
break;
case 59:
 this.$ = [['ORIENTATION'], ['LOAD', 0], ['EQ']]; 
break;
case 60:
 this.$ = [['ORIENTATION'], ['LOAD', 1], ['EQ']]; 
break;
case 61:
 this.$ = [['ORIENTATION'], ['LOAD', 2], ['EQ']]; 
break;
case 62:
 this.$ = [['ORIENTATION'], ['LOAD', 3], ['EQ']]; 
break;
case 63:
 this.$ = [['ORIENTATION'], ['LOAD', 0], ['EQ'], ['NOT']]; 
break;
case 64:
 this.$ = [['ORIENTATION'], ['LOAD', 1], ['EQ'], ['NOT']]; 
break;
case 65:
 this.$ = [['ORIENTATION'], ['LOAD', 2], ['EQ'], ['NOT']]; 
break;
case 66:
 this.$ = [['ORIENTATION'], ['LOAD', 3], ['EQ'], ['NOT']]; 
break;
case 67:
 
    {
      let res= [['BEGSTRING', (yytext.length-2)+1]];
      for (let i =1; i < yytext.length-1; i++) {
        res = res.concat([['CHAR', yytext.charCodeAt(i)]]);
      }
      res = res.concat([['CHAR', 0]]); //EOS
      this.$ = res;
    }
  
break;
case 68:
 this.$ = [['PARAM', $$[$0]]]; 
break;
case 69:
 this.$ = [['LOAD', parseInt(yytext)]]; 
break;
case 70:
 this.$ = $$[$0-1].concat([['INC']]); 
break;
case 71:
 this.$ = $$[$0-1].concat([['DEC']]); 
break;
case 72:
 this.$ = yytext; 
break;
case 73:
 this.$ = [['LINE', yylineno]]; 
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:3,6:[1,4],12:5,13:7,14:$V0,20:6},{6:[1,9],20:10},{7:[1,11],21:12,75:$V1},{5:13,6:[1,14],13:15,14:$V0,20:6},{6:[2,10]},o($V2,[2,6]),{8:[1,16]},{7:[1,17],21:12,75:$V1},{6:[2,9]},{8:[1,18]},{15:19,75:$V3},{6:[1,21],20:10},{7:[1,22],21:12,75:$V1},o($V2,[2,5]),{15:23,75:$V3},{8:[1,24]},{9:[1,25]},{8:[1,26]},o([8,9,16],[2,72]),{7:[1,27],21:12,75:$V1},{8:[1,28]},{9:[1,29]},{9:[1,30]},{10:31,17:$V4},{9:[1,33],22:[1,34]},{8:[1,35]},{9:[1,36]},{16:[1,37]},{10:38,17:$V4},{11:[1,39]},{10:53,15:55,16:$V5,17:$V4,18:40,23:41,24:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:48,32:49,33:50,34:51,35:52,37:$Vc,40:$Vd,41:$Ve,42:$Vf,75:$V3},{10:60,17:$V4},{15:61,75:$V3},{9:[1,62]},{10:63,17:$V4},o($V2,[2,7]),{11:[1,64]},{1:[2,2]},{10:53,15:55,16:$V5,17:$V4,19:[1,65],23:66,24:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:48,32:49,33:50,34:51,35:52,37:$Vc,40:$Vd,41:$Ve,42:$Vf,75:$V3},o($Vg,[2,14]),{8:$Vh,16:$Vi,25:67},{8:$Vh,16:$Vi,25:70},{8:$Vh,16:$Vi,25:71},{8:$Vh,16:$Vi,25:72},{8:$Vh,16:$Vi,25:73},{8:$Vh,16:$Vi,25:74},o($Vj,[2,21]),{16:[1,75]},o($Vj,[2,23]),o($Vj,[2,24]),o($Vj,[2,25]),o($Vj,[2,26]),o($Vj,[2,27]),{8:[1,77],16:$Vi,25:76},{8:$V1,21:78},{8:$V1,21:79},{8:$V1,21:80},{8:$V1,21:81},{6:[2,11]},{9:[1,82]},{10:83,17:$V4},{11:[1,84]},{1:[2,1]},o([6,11,16,17,19,24,26,27,28,29,30,37,39,40,41,42,75],[2,8]),o($Vg,[2,13]),o($Vj,[2,15]),{9:$Vk},o($Vj,[2,29]),o($Vj,[2,16]),o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,22]),o($Vj,[2,30]),{9:$Vk,15:87,36:86,72:$Vl,73:$Vm,74:$Vn,75:$V3},{8:[1,91]},{8:[1,92]},{8:[1,93]},{8:[1,94]},{10:95,17:$V4},{11:[1,96]},{1:[2,4]},{16:[1,97]},{9:[1,98]},{9:[2,68]},{9:[2,69]},{8:[1,99]},{8:[1,100]},{15:87,36:101,43:102,71:[1,103],72:$Vl,73:$Vm,74:$Vn,75:$V3},{8:$Vo,38:104,46:105,48:106,49:$Vp,50:108,51:$Vq,52:110,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI},{8:$Vo,38:130,46:105,48:106,49:$Vp,50:108,51:$Vq,52:110,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI},{15:87,36:131,72:$Vl,73:$Vm,74:$Vn,75:$V3},{6:[2,12]},{1:[2,3]},o($Vj,[2,28]),{16:[1,132]},{15:87,36:133,72:$Vl,73:$Vm,74:$Vn,75:$V3},{15:87,36:134,72:$Vl,73:$Vm,74:$Vn,75:$V3},{9:[1,135]},{9:[1,136],44:[1,137]},o([9,44],[2,67]),{9:[1,138],45:$VJ},o($VK,[2,40],{47:$VL}),o($VM,[2,42]),{8:$Vo,50:141,51:$Vq,52:110,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI},o($VM,[2,44]),{8:[1,142]},o($VM,[2,46],{8:[1,143]}),{8:$Vo,38:144,46:105,48:106,49:$Vp,50:108,51:$Vq,52:110,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI},o($VN,[2,49]),o($VN,[2,50]),o($VN,[2,51]),o($VN,[2,52]),o($VN,[2,53]),o($VN,[2,54]),o($VN,[2,55]),o($VN,[2,56]),o($VN,[2,57]),o($VN,[2,58]),o($VN,[2,59]),o($VN,[2,60]),o($VN,[2,61]),o($VN,[2,62]),o($VN,[2,63]),o($VN,[2,64]),o($VN,[2,65]),o($VN,[2,66]),{9:[1,145],45:$VJ},{9:[1,146]},o($Vj,[2,31]),{9:[1,147]},{9:[1,148]},{16:[2,36]},{16:[2,37]},{15:87,36:149,72:$Vl,73:$Vm,74:$Vn,75:$V3},{10:53,15:55,16:$V5,17:$V4,23:150,24:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:48,32:49,33:50,34:51,35:52,37:$Vc,40:$Vd,41:$Ve,42:$Vf,75:$V3},{8:$Vo,46:151,48:106,49:$Vp,50:108,51:$Vq,52:110,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI},{8:$Vo,48:152,49:$Vp,50:108,51:$Vq,52:110,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI},o($VM,[2,43]),{15:87,36:153,72:$Vl,73:$Vm,74:$Vn,75:$V3},{9:[1,154]},{9:[1,155],45:$VJ},{10:53,15:55,16:$V5,17:$V4,23:156,24:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:48,32:49,33:50,34:51,35:52,37:$Vc,40:$Vd,41:$Ve,42:$Vf,75:$V3},{10:53,15:55,16:$V5,17:$V4,23:157,24:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:48,32:49,33:50,34:51,35:52,37:$Vc,40:$Vd,41:$Ve,42:$Vf,75:$V3},{9:[2,70]},{9:[2,71]},{9:[1,158]},o($Vg,[2,32],{39:[1,159]}),o($VK,[2,39],{47:$VL}),o($VM,[2,41]),{9:[1,160]},o($VM,[2,47]),o($VM,[2,48]),o($Vj,[2,34]),o($Vj,[2,35]),{16:[2,38]},{10:53,15:55,16:$V5,17:$V4,23:161,24:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:48,32:49,33:50,34:51,35:52,37:$Vc,40:$Vd,41:$Ve,42:$Vf,75:$V3},o($VM,[2,45]),o($Vj,[2,33])],
defaultActions: {6:[2,10],10:[2,9],39:[2,2],60:[2,11],64:[2,1],84:[2,4],87:[2,68],88:[2,69],95:[2,12],96:[2,3],135:[2,36],136:[2,37],147:[2,70],148:[2,71],158:[2,38]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  
function validate(function_list, program, yy) {
	var functions = {};
	var prototypes = {};

	for (var i = 0; i < function_list.length; i++) {
		if (functions[function_list[i][0]]) {
			yy.parser.parseError("Function redefinition: " + function_list[i][0], {
				text: function_list[i][0],
				line: function_list[i][1][0][1]
			});
		}

		functions[function_list[i][0]] = program.length;
		prototypes[function_list[i][0]] = function_list[i][2];
		program = program.concat(function_list[i][1]);
	}

	var current_line = 1;
	for (var i = 0; i < program.length; i++) {
		if (program[i][0] == 'LINE') {
			current_line = program[i][1];
		} else if (program[i][0] == 'CALL') {
			if (!functions[program[i][1]] || !prototypes[program[i][1]]) {
				yy.parser.parseError("Undefined function: " + program[i][1], {
					text: program[i][1],
					line: current_line
				});
			} else if (prototypes[program[i][1]] != program[i][2]) {
				yy.parser.parseError("Function parameter mismatch: " + program[i][1], {
					text: program[i][1],
					line: current_line
				});
			}

			program[i][2] = program[i][1];
			program[i][1] = functions[program[i][1]];
		} else if (program[i][0] == 'PARAM' && program[i][1] != 0) {
			yy.parser.parseError("Unknown variable: " + program[i][1], {
				text: program[i][1],
				line: current_line
			});
		}
	}

	return program;
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore */
break;
case 1:/* ignore */
break;
case 2:/* ignore */
break;
case 3: return 71
break;
case 4: return 4; 
break;
case 5: return 14;
break;
case 6: return 42; 
break;
case 7: return 7; 
break;
case 8: return 6; 
break;
case 9: return 30; 
break;
case 10: return 29; 
break;
case 11: return 26; 
break;
case 12: return 24; 
break;
case 13: return 27; 
break;
case 14: return 28; 
break;
case 15: return 40; 
break;
case 16: return 41; 
break;
case 17: return 74; 
break;
case 18: return 73; 
break;
case 19: return 74; 
break;
case 20: return 73; 
break;
case 21: return 51; 
break;
case 22: return 53; 
break;
case 23: return 54; 
break;
case 24: return 55; 
break;
case 25: return 56; 
break;
case 26: return 57; 
break;
case 27: return 58; 
break;
case 28: return 59; 
break;
case 29: return 60; 
break;
case 30: return 61; 
break;
case 31: return 62; 
break;
case 32: return 64; 
break;
case 33: return 66; 
break;
case 34: return 65; 
break;
case 35: return 63; 
break;
case 36: return 68; 
break;
case 37: return 70; 
break;
case 38: return 69; 
break;
case 39: return 67; 
break;
case 40: return 22;
break;
case 41: return 22;
break;
case 42: return 39; 
break;
case 43: return 37; 
break;
case 44: return 49; 
break;
case 45: return 49; 
break;
case 46: return 45; 
break;
case 47: return 45; 
break;
case 48: return 47; 
break;
case 49: return 47; 
break;
case 50: return 47; 
break;
case 51: return 8; 
break;
case 52: return 9; 
break;
case 53: return 17; 
break;
case 54: return 19; 
break;
case 55: return 16; 
break;
case 56: return 44; 
break;
case 57: return 72; 
break;
case 58: return 75; 
break;
case 59: return 11; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/[^\n]*)/,/^(?:\/\*(?:[^*]|\*(?!\/))*\*\/)/,/^(?:"[^\"\n]*")/,/^(?:!codigo\b)/,/^(?:!importar\b)/,/^(?:imprimir\b)/,/^(?:principal\b)/,/^(?:metodo\b)/,/^(?:regresa\b)/,/^(?:termina\b)/,/^(?:giraIzquierda\b)/,/^(?:avanza\b)/,/^(?:cogeZumbador\b)/,/^(?:dejaZumbador\b)/,/^(?:mientras\b)/,/^(?:repetir\b)/,/^(?:anterior\b)/,/^(?:siguiente\b)/,/^(?:ant\b)/,/^(?:sig\b)/,/^(?:esZero\b)/,/^(?:frenteLibre\b)/,/^(?:frenteBloqueado\b)/,/^(?:izquierdaLibre\b)/,/^(?:izquierdaBloquedo\b)/,/^(?:derechaLibre\b)/,/^(?:derechaBloqueada\b)/,/^(?:juntoAZumbador\b)/,/^(?:noJuntoAZumbador\b)/,/^(?:mochilaConZumbadores\b)/,/^(?:mochilaSinZumbadores\b)/,/^(?:orientadoAlNorte\b)/,/^(?:orientadoAlSur\b)/,/^(?:orientadoAlEste\b)/,/^(?:orientadoAlOeste\b)/,/^(?:noOrientadoAlNorte\b)/,/^(?:noOrientadoAlSur\b)/,/^(?:noOrientadoAlEste\b)/,/^(?:noOrientadoAlOeste\b)/,/^(?:variable\b)/,/^(?:var\b)/,/^(?:sino\b)/,/^(?:si\b)/,/^(?:!)/,/^(?:no\b)/,/^(?:\|\|)/,/^(?:o\b)/,/^(?:&&)/,/^(?:&)/,/^(?:y\b)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:,)/,/^(?:[0-9]+)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = karelkpp;
exports.Parser = karelkpp.Parser;
exports.parse = function () { return karelkpp.parse.apply(karelkpp, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}